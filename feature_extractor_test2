#!/bin/bash

function atribute_start
{

rm -r feature_dir
mkdir feature_dir
cd ./feature_dir

## $1 .gff $2 out_mci $3 atr_list

cp ./../$1 gff
cp ./../$2 out_mci 

#mv $1 gff

## Selecciono solo los cluster mayeres a $min_whole
## La variable min_whole es seteada por la funcion master_input2
if [ -n "$min_whole" ]
then
	awk -v min=$min_whole '(NF>=min){ print } (NF<min){ exit  }' out_mci > A
	mv A out_mci
fi


if  [[ -f  $3  ]]
then
	cp ./../$3 atr_list
else
	echo "$3" > ./atr_list
	echo "Atribute List:" 
	cat ./atr_list
fi
}


##########################  All Atributes  ###############################

function all_atributes
{

## Lista de atributos en el gff
awk '{ print $9 }' ./gff | tr ";" "\n" | sed 's!^\(.*\)=\(.*\)!\1!' | sort | uniq  > atr_list_full

}

#########################  Atribute Checker  #############################

## Detección de errores en la lista de atributos
## Separacion de cada atributo según si produjo un error o no 

function atribute_checker
{

#echo "####### Entrando al While ########"
while true  
do

atr_vect=()   ### Vector que va a incorporar los atributos 
error_vect=() ### Vector con los atributos que producen errores
error_count=0 ### Cuenta de errores

## Usado en caso de existir error en la atr_list original
if [[ ${#new_atr_list[@]} -gt 0  ]]
then
	echo "${new_atr_list[@]}" > atr_list
	new_atr_list=()  ### Se vacia new_atr_list 
	error_vect=()    ### Se vacia error_vect
fi


#echo "###### Entrando al for ######"
for atr in $(cat atr_list)
do
	
	#echo $atr

	#Se modifica $atr para que solo busque palabras independientes
	#atr_regexp=$( echo $atr | sed 's/|/$&^/g' ) 
	
	grep -E "^$atr$" ./atr_list_full | wc -l > atr_num
	atr_num=$(cat atr_num)  
	rm atr_num

	if (( $atr_num != 1 ))
	then
	
	#Vector con las regex de usuario que provocan errores
	#Se cuenta el numero de errores
		echo "ERROR: $atr_num atribute types match: $atr "	
		ERROR="TRUE"
		let error_count++
		error_vect=( "${error_vect[@]}" "$atr" )

	else
				
	#Vector con las regex del usuario que no prvocan errores
		atr_vect=( "${atr_vect[@]}" "$atr"  )
	
	fi

done 

###################### Toma de decision ######################

### Se avisa al usuario si la lista de atributos ingresada contiene errores
### Se pregunta si quiere remplazar los atributos antes de continuar, o por 
### el contrario quiere continuar solo con los que anduvieron
### En caso negativo se pregunta si quiere continuar con el anàlisis

correction=false

if (( error_count > 0  ))
then
	echo "$error_count of the entered attributes cause errors: "
	echo "${error_vect[@]}"
	echo ""
	echo -n "Do you want to remplace them before continiung the analysis? (y|n) "
	read input1
	
	case $input1 in
		y|yes|YES) echo "Remplacing atributes"
			correction=true;;
		*) ;;
	esac
	
	if [[ $correction == true  ]]
	then
		echo -n "Do you want to see a list with all atributes finded? (y|n) "
		read input2
		case $input2 in
			y|yes|YES) echo "Showing all finded atributes"
				cat atr_list_full;;
				
				*) echo "Not Showing all finded atribtes"	
			esac
	
		echo "Insert a new list of atributes:"
		read read_atr
		new_atr_list=( "$read_atr" )
		echo "Showing new atribute list:"
		echo "${new_atr_list[@]}"

	else
		echo -n "Do you want to terminate the analysis? (y|n) "
		read input3

		case $input3 in
			n|no|NO) echo "Continuing without correction..."
				break;;
			*) echo "Analyisis terminated"
				exit;;
		esac
	
	fi
	
else
 echo "No errors detected. Coninuing the analysis"
 break
fi

#echo "Test line ····"

done
}

########################### Atribute Fusion  ###################################
 
# Requiere que esten definidos $rem, $sub
# Requiere un archivo gff

## POR HACER ##
## -Geralizar 'atribute_checker' para que revise 'atribute_fusion'
## -Basicamente en vez de trabajar con el arhcivo atr_list también 
##  pueda revisar variables como $rem

function atribute_fusion
{
echo "Initializing atribute fussion..."

local -n rem_vect=($rem) &> temp
local -n sub_vect=($sub) &> temp
rm temp
pwd
echo "rem_vect: ${rem_vect[@]}
sub_vect: ${sub_vect[@]}"

if (( ${#rem_vect[@]} == 0 ))
then
        echo "ERROR: There isn't a string to remplace"
elif (( ${#sub_vect[@]} == 0 ))
then
        echo "ERROR: There isn't a substitute string"
elif (( ${#rem_vect[@]} !=  ${#sub_vect[@]} &&  ${#sub_vect[@]} != 1 ))
then
        echo "ERROR: There must be one substitute word for each rempleced word, or one susbtitute word for all rempleced words"
fi



if (( ${#rem_vect[@]} == ${#sub_vect[@]}  ))
then
        for ind in ${!rem_vect[@]}
        do
                sed -i "s/${rem_vect[$ind]}=/${sub_vect[$ind]}=/g" gff
        done

elif (( ${#sub_vect[@]} == 1   ))
then
        for ind in ${!rem_vect[@]}
        do
                sed -i "s/${rem_vect[$ind]}=/${sub_vect[0]}=/g" gff
        done
fi

}





######################### Gff Formater  ############################

function gff_formater
{

#Se cambia el formato URL del gff
sed -i 's/%2C/,/g' gff  # %2C ,
sed -i 's/%3B/;/g' gff  # %3B ;
sed -i 's/%3D/=/g' gff  # %3D =

}




####################### Atribute Extractor  #########################

### Falta tomar en cuenta el caso que un ID tenga varios Parent
### Recorro cada fila y dentro de ella cada columna de out_mci
### A cada celda hago un AWK cambiando la regex segun atr_list
### Al final se obtienen los archivos column_$atr con todos los atributos para cada gen

function atribute_extractor
{
echo "Initializing atribute extractor..."

IFS_old=$IFS
IFS=$'\n'
for cluster in $(cat out_mci)
do
        IFS=$'\t'
	for ID in $cluster
        do
		
                for atr in ${atr_vect[@]}
                do
		


			grep "ID=$ID"  ./gff | tr "\n" ";" | awk -v atribute="$atr"  'BEGIN{ bool="FALSE"; RS=";"}   ( $0 ~ atribute ){if (bool=="FALSE") {print ($0); bool="TRUE"} }  END{if (bool=="FALSE") {print("-----") }}'  | sed 's/\t//g'  | sed "s/.*=//" >> atribute_"$atr"
			##En el ultimo pipe se cambia sed "s/$atr=//" por sed 's/.*=//'
                done

        done 

	####Se agrega un tag marcando el final de cada cluster
        for atr in ${atr_vect[@]}
        do

                echo "&tag&" >> atribute_$atr
		
        done
	
done
IFS=$IFS_old



## Se pone un cluster por linea
for atr in ${atr_vect[@]}
do
	
	tr "\n" "\t" < atribute_$atr > A
	mv A atribute_$atr
        sed -i 's/\&tag\&/\n/g' atribute_$atr
	
	## Esta linea quita los campos vacios que se cran al cambiar &tag& por \n
	sed -i 's/^\t\|\t$//g' atribute_$atr  

done

}
##########################################################################


function master_feature_extractor
{
## $1 gff $2 out_mci $3 "atr_string"/file
atribute_start $1  $2 "$3"

all_atributes; atribute_checker; 

if [[ $fusion == "TRUE"  ]]
then
	atribute_fusion
fi

gff_formater; atribute_extractor

}

#master_feature_extractor -R "Name" -S "product"  all_gff all_mci "product ortholog_cluster"
